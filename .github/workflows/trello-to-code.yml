name: Trello to Code

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trello_card_updated]

jobs:
  trello_to_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install transformers torch requests

      - name: Check Original Code Functionalities
        id: check_original_code
        run: |
          import requests

          API_URL = "https://api-inference.huggingface.co/models/distilgpt2"
          API_KEY = "${{ secrets.HUGGINGFACE_API_KEY }}"
          headers = {"Authorization": f"Bearer {API_KEY}"}

          def query(payload):
              response = requests.post(API_URL, headers=headers, json=payload)
              return response.json()

          existing_code = "console.log('Hello, World!');"  # Example; replace with actual code
          prompt = (
              f"Here is the existing code:\n\n{existing_code}\n\n"
              "Please list all the functionalities of this code in a concise manner.\n"
          )
          output = query({"inputs": prompt})
          functionalities = output[0]['generated_text']
          print("Documented functionalities:", functionalities)

      - name: Check Card Description
        id: check_card_description
        run: |
          card_description = "${{ github.event.client_payload.card_description }}"
          if not card_description:
              raise ValueError("Card description is empty.")
          print("Validated description:", card_description)

      - name: Write Plan
        id: write_plan
        run: |
          task_description = "${{ steps.check_card_description.outputs.card_description }}"
          prompt = (
              f"Task: {task_description}\n"
              "Please provide a detailed plan to accomplish this task.\n"
          )
          output = query({"inputs": prompt})
          plan = output[0]['generated_text']
          print("Plan:", plan)

      - name: Write Code for Specific Task
        id: write_code
        run: |
          existing_code = "console.log('Hello, World!');"  # Example; replace with actual code
          task_description = "${{ steps.check_card_description.outputs.card_description }}"
          prompt = (
              f"Here is the existing code:\n\n{existing_code}\n\n"
              f"Task: {task_description}\n\n"
              "Please provide the updated version of the code to accomplish the task.\n"
          )
          output = query({"inputs": prompt})
          updated_code = output[0]['generated_text'].split("Updated code:\n")[-1].strip()
          print("Updated code:", updated_code)

      - name: Check All Functionalities Still Exist
        id: check_functionalities
        run: |
          functionalities = "${{ steps.check_original_code.outputs.functionalities }}"
          updated_code = "${{ steps.write_code.outputs.updated_code }}"
          prompt = (
              f"Existing functionalities:\n\n{functionalities}\n\n"
              f"Updated code:\n\n{updated_code}\n\n"
              "Please check if all existing functionalities still exist in the updated code.\n"
          )
          output = query({"inputs": prompt})
          check_result = output[0]['generated_text']
          print("Check result:", check_result)
          if "all functionalities exist" not in check_result.lower():
              raise ValueError("Not all functionalities exist in the updated code.")

      - name: Commit and Push Changes
        if: success()
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "${{ steps.write_code.outputs.updated_code }}" > updated_code.py
          git add updated_code.py
          git commit -m "Update code for task: ${{ steps.check_card_description.outputs.card_description }}"
          git push origin main

      - name: Repeat Workflow if Functionalities Not Met
        if: failure()
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'trello-to-code.yml',
              ref: 'main',
              inputs: {
                card_description: context.payload.client_payload.card_description,
              },
            })
