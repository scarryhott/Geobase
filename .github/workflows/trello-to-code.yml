name: Trello to Code

on:
  issues:
    types: [opened, edited]

jobs:
  trello_to_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Generate Code from Issue Description
        id: generate_code
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "Issue title: $ISSUE_TITLE"
          echo "Issue body: $ISSUE_BODY"
          
          if [ -z "$ISSUE_BODY" ]; then
            echo "No description provided. Exiting."
            exit 0
          fi

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/engines/davinci-codex/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "prompt": "Generate code for the following task: '"${ISSUE_BODY}"'",
              "max_tokens": 150
            }')
          echo "$RESPONSE" | jq -r '.choices[0].text' > generated_code.py
          cat generated_code.py

      - name: Update or Create File with Generated Code
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          FILE_NAME=$(echo "$ISSUE_TITLE" | tr ' ' '_').py
          GENERATED_CODE=$(cat generated_code.py)

          echo "Processing file: $FILE_NAME"
          echo "Generated code: $GENERATED_CODE"

          if [[ -f "$FILE_NAME" ]]; then
            echo "$GENERATED_CODE" >> "$FILE_NAME"
          else
            echo "$GENERATED_CODE" > "$FILE_NAME"
          fi

          git add "$FILE_NAME"
          git commit -m "Add/update file for issue $ISSUE_TITLE"

          # Pull the latest changes from the remote repository to avoid conflicts
          git pull --rebase origin main
          
          # Configure remote URL to use the GitHub token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Push the changes to the remote repository
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
