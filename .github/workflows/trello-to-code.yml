name: Trello to Code

on:
  issues:
    types: [opened, edited]

jobs:
  trello_to_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Code from Issue Description
        id: generate_code
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          FILE_NAME=$(echo "$ISSUE_TITLE" | tr ' ' '_').py
          echo "Issue title: $ISSUE_TITLE"
          echo "Issue body: $ISSUE_BODY"
          
          if [ -z "$ISSUE_BODY" ]; then
            echo "No description provided. Exiting."
            exit 0
          fi

          # Read the current content of the file if it exists
          if [[ -f "$FILE_NAME" ]]; then
            CURRENT_CONTENT=$(cat "$FILE_NAME")
          else
            CURRENT_CONTENT=""
          fi
          
          echo "Current file content: $CURRENT_CONTENT"

          # Properly format the JSON payload
          PAYLOAD=$(jq -n \
            --arg current_content "$CURRENT_CONTENT" \
            --arg issue_body "$ISSUE_BODY" \
            '{
              model: "text-davinci-003",
              prompt: "Given the following existing code and task description, generate an updated version of the code. Existing code: \($current_content) Task description: \($issue_body)",
              max_tokens: 150
            }')

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          
          echo "API Response: $RESPONSE"

          GENERATED_CODE=$(echo "$RESPONSE" | jq -r '.choices[0].text')
          echo "Generated code: $GENERATED_CODE"

          if [ "$GENERATED_CODE" = "null" ] || [ -z "$GENERATED_CODE" ]; then
            echo "Generated code is null or empty. Exiting."
            exit 1
          fi

          echo "$GENERATED_CODE" > "$FILE_NAME"

      - name: Update or Create File with Generated Code
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          FILE_NAME=$(echo "$ISSUE_TITLE" | tr ' ' '_').py

          git add "$FILE_NAME"
          git commit -m "Update file for issue $ISSUE_TITLE"

          # Pull the latest changes from the remote repository to avoid conflicts
          git pull --rebase origin main
          
          # Configure remote URL to use the GitHub token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Push the changes to the remote repository
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
